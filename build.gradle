import groovyx.net.http.RESTClient
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.Method
import groovyx.net.http.ContentType
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.client.methods.HttpPut
import org.apache.http.entity.FileEntity

buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.1.1'
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
        classpath 'org.slf4j:slf4j-log4j12:1.7.7'
        classpath 'org.slf4j:jcl-over-slf4j:1.7.7'
    }
}

plugins {
    id "io.spring.dependency-management" version "0.4.0.RELEASE"
}

version "0.1"
group "pet.store"

apply plugin: "spring-boot"
apply plugin: "war"
apply plugin: "asset-pipeline"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

assets {
    minifyJs = true
    minifyCss = true
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"

    compile "org.grails.plugins:hibernate"
    compile "org.grails.plugins:cache"
    compile "org.hibernate:hibernate-ehcache"

    runtime "org.grails.plugins:asset-pipeline"
    runtime "org.grails.plugins:scaffolding"

    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"

    // Note: It is recommended to update to a more robust driver (Chrome, Firefox etc.)
    testRuntime 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.44.0'

    console "org.grails:grails-console"
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

/**
 * Uploading a source tarball with the compiled jar and an empty maven build to make the Java buildpack happy
 */
task emptyPom {
    outputs.file('build/pom.xml')
    doLast {
        new File('build/pom.xml') << """
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>pet.store</groupId>
  <artifactId>placeholder</artifactId>
  <packaging>jar</packaging>
  <version>1.0</version>
  <name>Pet Store</name>
  <build>
    <finalName>placeholder</finalName>
  </build>
</project>
"""
    }
}

distTar.dependsOn emptyPom
distTar.from 'Procfile'
distTar.from 'build/pom.xml'

/**
 * Building a slug:
 */
// https://devcenter.heroku.com/articles/platform-api-deploying-slugs
// http://lang-jvm.s3.amazonaws.com/jdk/openjdk1.8.0_40-cedar14.tar.gz

ext {
    jdkCachedir = "${gradle.getGradleUserHomeDir()}/caches/jdk"
    jdkFilename = "openjdk1.8.0_40-cedar14.tar.gz"
    jdkPath = "${jdkCachedir}/${jdkFilename}"
}

task download_openjdk8() {
    description = "Download OpenJDK 8 for the slug"
    group = "distribution"
    new File(jdkCachedir).mkdirs()
    outputs.file(jdkPath)
    doLast {
        ant.get(src: "http://lang-jvm.s3.amazonaws.com/jdk/${jdkFilename}", dest: jdkPath, verbose: "on", usetimestamp: "on")
    }
}

// profile copied from https://github.com/heroku/heroku-buildpack-jvm-common/blob/master/bin/java
task slug_profile {
    description = "Profile script for slug that configures Java"
    group = "distribution"
    outputs.file('build/jvmcommon.sh')
    doLast {
        def file = new File('build/jvmcommon.sh')
        file.text = """
export JAVA_HOME="\$HOME/.jdk"
export PATH="\$JAVA_HOME/bin:\$PATH"
limit=\$(ulimit -u)
case \$limit in
256)   # 1X Dyno
  default_java_opts="-Xmx384m -Xss512k"
  ;;
512)   # 2X Dyno
  default_java_opts="-Xmx768m"
  ;;
32768) # PX Dyno
  default_java_opts="-Xmx4g"
  ;;
*)
  default_java_opts="-Xmx384m -Xss512k"
  ;;
esac

export JAVA_TOOL_OPTIONS=\${JAVA_TOOL_OPTIONS:-"\${default_java_opts} -Dfile.encoding=UTF-8 -Djava.rmi.server.useCodebaseOnly=true"}
"""
        file.setExecutable(true, false)
    }
}
task slug(type: Tar, dependsOn: [ bootRepackage, download_openjdk8, slug_profile ]) {
    description = "Package application into Heroku slug"
    group = "distribution"
    appendix = "slug"
    compression = Compression.GZIP
    into("app") {
        from jar.archivePath
    }
    into("app/.jdk") {
        from tarTree(resources.gzip(jdkPath))
    }
    into("app/.profile.d") {
        from "build/jvmcommon.sh"
    }
}

task deployToHeroku(dependsOn: slug) {
    description = 'Deploy the application to Heroku'
    group = "distribution"
    doLast {
        RESTClient heroku = new RESTClient("https://api.heroku.com/apps/${System.getenv("HEROKU_APP_NAME")}/")
        heroku.headers['Authorization'] = "Bearer ${System.getenv('HEROKU_AUTH_TOKEN')}"
        heroku.headers['Accept'] = 'application/vnd.heroku+json; version=3'

        // create the slug
        def slug = heroku.post(path: 'slugs', requestContentType: "application/json",
                body: ["process_types": [ "web": "java \$JAVA_OPTS -jar ${project.tasks.jar.archivePath.name} host=0.0.0.0 port=\$PORT".toString()],
                "stack": "cedar-14"])
        logger.info("Created slug ${slug.data.id}")

        // upload the slug
        logger.info("Uploading ${project.tasks.slug.archivePath} to ${slug.data.blob.url}")
        def res = new DefaultHttpClient().execute(new HttpPut(URI: new URI(slug.data.blob.url), entity: new FileEntity(project.tasks.slug.archivePath)))
        if (res.statusLine.statusCode > 399) {
            throw new IOException(re.statusLine.reasonPhrase)
        }

        // release the slug
        heroku.post(path: 'releases', requestContentType: 'application/json',
            body:[ 'slug': slug.data.id ])
        logger.info("Released slug ${slug.data.id}")
    }
    onlyIf { System.getenv('HEROKU_AUTH_TOKEN') && System.getenv('HEROKU_APP_NAME') }
}
